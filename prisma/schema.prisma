// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Alarmlist {
    id        String   @id @default(cuid())
    name      String   @db.VarChar(20)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    isOn      Boolean  @default(true)
    userId    String

    alarms    Alarm[]
    user      User     @relation(fields: [userId], references: [id])

    @@unique([id])

    // Data structure that improves the speed of data retrieval operations on a database table.
    @@index([userId])
}

model Alarm {
    id              String  @id @default(cuid())
    name            String  @default("Alarm")
    hour            Int
    minutes         Int
    sound           String?
    snooze          Boolean  @default(false)
    snoozeEndTime   DateTime?
    isOn            Boolean  @default(true)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    alarmlistId     String
    userId          String

    alarmlist       Alarmlist @relation(fields: [alarmlistId], references: [id], onDelete: Cascade)
    user            User     @relation(fields: [userId], references: [id])

    @@unique([id, alarmlistId])

    @@index([alarmlistId])
    @@index([userId])
}

model Preference {
  id           Int      @id @default(autoincrement())
  userId       String   @unique
  use12Hour    Boolean  @default(true)

  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])

    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    alarmlists    Alarmlist[]
    alarms        Alarm[]
    preferences   Preference?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
